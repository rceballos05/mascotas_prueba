@using Radzen
@using Radzen.Blazor
@using SistemaVeterinario.Backend.Interfaces
@inject IConsultasRepository consultasRepository
@inject EmpresaSeleccionadaNavigationData empresaData
@inject UserNavgationData userLoged
<div class="container">
    <div class="row">
        <!-- Left Form Panel -->
        <div class="col-md-4">
            <div class="form-container">
                <h5>Filtro de Consultas</h5>
                <form>
                    <div class="mb-3">
                        <label for="codigo" class="form-label">Código</label>
                        <input type="text" class="form-control" id="codigo" @bind-value="NuevaConsulta.ID">
                    </div>
                    <div class="mb-3">
                        <label for="nombre" class="form-label">Nombre</label>
                        <input type="text" class="form-control" id="nombre" @bind-value="NuevaConsulta.Nombre">
                    </div>
                    <div class="mb-3">
                        <label for="precio" class="form-label">Precio Venta</label>
                        <input type="number" class="form-control" id="precio" @bind-value = "NuevaConsulta.Valor">
                    </div>
                    <div class="mb-3 form-check">
                        <input type="checkbox" class="form-check-input" id="activo" @bind-value = "NuevaConsulta.Activo" checked="@NuevaConsulta.Activo">
                        <label class="form-check-label" for="activo">Activo</label>
                    </div>
                </form>
            </div>
            <div class="mt-3">
                @if(NuevoItem)
                {
                    <button class="btn btn-primary me-2" @onclick="RegistrarNuevoTipoConsulta">
                        <i class="fa fa-save" ></i> Grabar Datos
                    </button>
                }
                else
                {
                    <button class="btn btn-primary me-2" @onclick="ModificarTipoConsulta">
                        <i class="fa fa-save" ></i> Modificar Datos
                    </button>
                }
                <button class="btn btn-danger me-2" @onclick="DeleteTipo">
                    <i class="fa fa-trash"></i> Eliminar Registro
                </button>
                <button class="btn btn-secondary mt-2" @onclick="NuevoRegistro">
                    <i class="fa fa-plus"></i> Nuevo
                </button>
            </div>
        </div>

        <!-- Right Table Panel -->
        <div class="col-md-8">
            <div class="table-container">
                <h5>Listado Consultas</h5>
                <div class="table-responsive">
                    <RadzenDataGrid Data="@TiposConsultas" TItem="TipoConsulta" AllowPaging="true" PageSize="5" ShowPagingSummary="true" AllowFiltering="false" AllowSorting="true" EmptyText="No hay registros para mostrar." >
                        <Columns>
                            <RadzenDataGridColumn TItem="TipoConsulta" Property="ID" Title="Código" />
                            <RadzenDataGridColumn TItem="TipoConsulta" Property="Nombre" Title="Nombre" />
                            <RadzenDataGridColumn TItem="TipoConsulta" Property="Nombre" Title="Precio" />
                            <RadzenDataGridColumn TItem="TipoConsulta" Title="Activo">
                                <Template Context="data">
                                    <RadzenCheckBox TValue="bool" @bind-Value="data.Activo" Change="@(args => OnActivoChanged(data))" />
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="TipoConsulta" Title="Acción">
                                <Template Context="data">
                                    <RadzenButton Icon="check_circle" Style="color: green;" ButtonStyle="ButtonStyle.Light" Click="()=> SeleccionarItem(data)" />
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </div>
            </div>
        </div>
    </div>
</div>
@code{

    private bool NuevoItem = true;
    TipoConsulta NuevaConsulta = new TipoConsulta();
    List<TipoConsulta> TiposConsultas = new List<TipoConsulta>();
    private string nuevoid = "";
    protected override async Task OnInitializedAsync()
    {
        nuevoid = await consultasRepository.NumeroConsultaTipo(userLoged.Token,empresaData.Prefijo); 
        var tipos = await consultasRepository.Consultas(userLoged.Token,empresaData.Prefijo);
        NuevaConsulta.ID = nuevoid;
        if (tipos is not null)
        {
            if(tipos.Count >0)
            {
                TiposConsultas = tipos;
            }
        }

    }

    private void SeleccionarItem(TipoConsulta item)
    {
        NuevaConsulta.ID = item.ID;
        NuevaConsulta.Nombre = item.Nombre;
        NuevaConsulta.Valor = item.Valor;
        NuevaConsulta.Activo = item.Activo;
        NuevoItem = false;
        StateHasChanged();
    }
    private async void NuevoRegistro()
    {

        nuevoid = await consultasRepository.NumeroConsultaTipo(userLoged.Token,empresaData.Prefijo);
        NuevaConsulta = new TipoConsulta();
        NuevaConsulta.ID = nuevoid;
        NuevoItem = true;
        StateHasChanged();
    }

    private async Task RegistrarNuevoTipoConsulta()
    {
        var result = await consultasRepository.IngresarConsultaTipo(userLoged.Token,empresaData.Prefijo, NuevaConsulta);
        Console.WriteLine(result);
        if(result)
        {
            RecargarDatos();
        }
    }
    private async Task ModificarTipoConsulta()
    {
        Console.WriteLine("MODIFICAR");
        var result = await consultasRepository.ActualizarConsultaTipo(userLoged.Token,empresaData.Prefijo, (string)NuevaConsulta.ID, NuevaConsulta);
        Console.WriteLine(result);
        if(result)
        {
            RecargarDatos();

        }
    }
    private async Task RecargarDatos()
    {
        nuevoid = await consultasRepository.NumeroConsultaTipo(userLoged.Token,empresaData.Prefijo);
        TiposConsultas = new List<TipoConsulta>();
        var tipos = await consultasRepository.Consultas(userLoged.Token,empresaData.Prefijo);
        NuevaConsulta = new TipoConsulta();
        NuevaConsulta.ID = nuevoid;
        if (tipos is not null)
        {
            if (tipos.Count > 0)
            {
                TiposConsultas = tipos;
            }
        }
    }

    private async void DeleteTipo()
    {
        var result = await consultasRepository.DeleteConsultaTipo(userLoged.Token,empresaData.Prefijo, (string)NuevaConsulta.ID);
        Console.WriteLine(result);
        if(result)
        {
            RecargarDatos();
            NuevoItem = true;
            NuevaConsulta = new TipoConsulta();
        }
    }

    private async Task OnActivoChanged(TipoConsulta item)
    {
        // Aquí puedes llamar a tu servicio para actualizar el valor en backend
        var result = await consultasRepository.ActualizarConsultaTipo(userLoged.Token,empresaData.Prefijo, (string)item.ID, item);
        Console.WriteLine(result);
        if (result)
        {
            await RecargarDatos();
        }
        // Ejemplo: await raza.ActualizarActivo(item.Id, item.Activo);
    }
}