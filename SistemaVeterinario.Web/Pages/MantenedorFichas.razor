@page "/fichas"@using SistemaVeterinario.Backend.Entities.Dtos
@using SistemaVeterinario.Backend.Entities.Models
@using SistemaVeterinario.Backend.Interfaces
@using SistemaVeterinario.Backend.Repositories
@using SistemaVeterinario.Components.Components.Mantenedor_Fichas
@inject UserNavgationData userDataService@inject MascotaNavigationData data@inject EmpresaSeleccionadaNavigationData empresaData@inject Blazored.LocalStorage.ILocalStorageService localStorage@inject IMascotaRepository mascotaRepository@inject IHospitalizacionesRepository hospitalizacionesRepository@inject IPropietarioRepository propietarioRepository@inject IConsultasRepository consultasRepository@inject IControlesRepository controlesRepository@inject IRecetasRepository recetasRepository@inject IEspecieRepository especieRepository@inject IMascotasFotosRepository mascotasFotosRepository@inject IEstadoRepository estadoRepository@inject IRazaRepository razaRepository@inject IAuditoriaRepository auditoriaRepository@inject HttpClient http<AppBarFicha LoginUser="userLoged" Recarga="RecargaMascotas" /><NavigationBarFrm /><ModalAyuda Show="showModal" Title="Modificar Datos" ShowChanged="@(value => showModal = value)">    <SistemaVeterinario.Components.Components.Modificar_Mascota.FrmModificarMascota Mascota="mascota" UrlFoto="@urlFoto" Foto="MascotaFotos" Recarga="RecargaMascotas"/></ModalAyuda><div class="page-content mt-5 ml-5">    <!-- Main Content -->    <div class="row mt-3">        <!-- Left Section -->        <div class="col-md-8">            <!-- Header Tabs -->            <ul class="nav nav-tabs" role="tablist">                <li class="nav-item">                    <a class="nav-link active" data-bs-toggle="tab" href="#paciente" role="tab" aria-selected="true" >Ficha de Paciente</a>                </li>                <li class="nav-item">                    <a class="nav-link" data-bs-toggle="tab" href="#propietario" role="tab" aria-selected="false">Propietario Mascota</a>                </li>                <li class="nav-item">                    <a class="nav-link" data-bs-toggle="tab" href="#mascotas" role="tab" aria-selected="false">Mascotas de este Propietario</a>                </li>            </ul>            <!-- Form Content -->            <div class="card mt-3">                <div class="card-body">                    <div class="tab-content">                        <div class="tab-pane p-3 active" id="paciente" role="tabpanel" >                            <FrmFichaPaciente Mascota="mascota" RecargaDatos="RecargaDatos" />                        </div>                        <div class="tab-pane p-3" id="propietario" role="tabpanel" >                            <FrmPropietario Propietario="Propietario" RecargaDatos="RecargarCliente"/>                        </div>                        <div class="tab-pane p-3" id="mascotas" role="tabpanel">                            <FrmMascotasPropietario Mascotas="Mascotas" RecargaDatos="RecargaMascotas"/>                        </div>                    </div>                </div>            </div>        </div>        <!-- Right Section - Paw Print -->        <div class="col-md-4 mt-4">            <div class="card">                <div class="card-body text-center">                    @if(MascotaFotos.Url is null)
                    {                        <img src="../assets/images/wila.jpeg" asp-append-version="true" width="250" height="250" />
                    }
                    else
                    {                        <img src="@urlFoto" asp-append-version="true" width="250" height="250" />                    }                </div>            </div>        </div>    </div>    <div>        <!-- Table -->        <div class="card mt-3 col-lg-12">            <div class="card-header">                <div class="row align-items-center">                    <div class="col">                        <ul class="nav nav-pills nav-justified" role="tablist">                            <li class="nav-item waves-effect waves-light">                                <a class="nav-link active" data-bs-toggle="tab" href="#consultas" role="tab" aria-selected="true">Listado de Consultas</a>                            </li>                            <li class="nav-item waves-effect waves-light">                                <a class="nav-link" data-bs-toggle="tab" href="#controles" role="tab" aria-selected="false">Listado de Controles</a>                            </li>                            <li class="nav-item waves-effect waves-light">                                <a class="nav-link" data-bs-toggle="tab" href="#intervenciones" role="tab" aria-selected="false">Presupuestos e Intervenciones</a>                            </li>                            <li class="nav-item waves-effect waves-light">                                <a class="nav-link" data-bs-toggle="tab" href="#recetas" role="tab" aria-selected="false">Recetas Médicas</a>                            </li>                            <li class="nav-item waves-effect waves-light">                                <a class="nav-link" data-bs-toggle="tab" href="#hospitalizaciones" role="tab" aria-selected="false">Hospitalizaciones Clinicas</a>                            </li>                        </ul>                    </div><!--end col-->                </div>  <!--end row-->            </div><!--end card-header-->            <div class="card-body">                <div class="tab-content">                    <div class="tab-pane p-1 active" id="consultas" role="tabpanel">                        <TblConsultas Consulta="consulta" />                    </div>                    <div class="tab-pane p-1" id="controles" role="tabpanel">                        <TblControles Controls="control" />                    </div>                    <div class="tab-pane p-1" id="intervenciones" role="tabpanel">                        <TblIntervenciones />                    </div>                    <div class="tab-pane p-1" id="recetas" role="tabpanel">                        <TblRecetas Recetas="Recetas"/>                    </div>                    <div class="tab-pane p-1" id="hospitalizaciones" role="tabpanel">                        <TblHospitalizaciones Hospitalizaciones="Hospitalizaciones" />                    </div>                </div>            </div>        </div>    </div>    <!-- Action Buttons -->    <div class="row mt-3">        <div class="col">            <button class="btn btn-primary">                <i class="bi bi-plus-circle"></i> Nuevo Paciente            </button>            @if(ventana == "mascota")            {                <button class="btn btn-secondary" @onclick="ModificarMascota">                    <i class="bi bi-pencil"></i> Modificar Datos                </button>            }            else if(ventana == "propietario")            {                <button class="btn btn-secondary" @onclick="ModificaPropietario">                    <i class="fa fa-pencil"></i> Modificar Datos                </button>            }            <button class="btn btn-warning" @onclick="LimpiarFrm">                <i class="fa fa-eraser"></i> Limpiar Formulario            </button>            <button class="btn btn-danger">                <i class="bi bi-trash"></i> Eliminar Registro            </button>            <button class="btn btn-info">                <i class="bi bi-file-earmark-arrow-down"></i> Exportar Historial Clínico            </button>        </div>    </div></div>@code {
    private bool showModal = false;    private string ventana = "mascota";    private object user = new object();    private LoginResponse userLoged = new();    private MascotasDto? mascota = new MascotasDto();    private Propietario? Propietario = new Propietario();    private List<MascotasDto>? Mascotas = new List<MascotasDto>();    private List<ConsultasDto> consulta = new List<ConsultasDto>();    private List<ControlDto> control = new List<ControlDto>();    private List<RecetasDto> Recetas = new List<RecetasDto>();    private List<HospitalizacionesDto> Hospitalizaciones = new List<HospitalizacionesDto>();
    private MedMascotaFotos MascotaFotos = new MedMascotaFotos();
    public string urlFoto = "";    protected override async Task OnInitializedAsync()    {
        await auditoriaRepository.PostAuditoria(userLoged.Token, empresaData.Prefijo, new ControlUsuarioClinica
            {
            Accion= "Ingresa",
            Datos = empresaData.Nombre,
            Fecha = DateTime.Now,
            Formulario = "Form Principal",
            Hora = TimeOnly.Parse(DateTime.Now.ToString().Split(' ')[1]),
                Programa = "Gestión Clínica Veterinaria",
                Usuariosistema = userDataService.Login.usuario
        });        if (userDataService.Login == null)        {            var data = await localStorage.GetItemAsync<LoginResponse>("login");            if (data is not null)            {                userDataService.Login = data.Login;                userDataService.Token = data.Token;                userDataService.Empresas = data.Empresas;                StateHasChanged();            }        }               userLoged.Token = userDataService.Token;        userLoged.Login = userDataService.Login;        userLoged.Empresas = userDataService.Empresas;    }    private async Task RecargaMascotas(bool value)    {        if(showModal)
        {
            showModal = false; 
            StateHasChanged();
        }        if(value)        {            if(data.IdMascota is not null)            {                var mas = await mascotaRepository.GetMascota(userLoged.Token,empresaData.Prefijo, (string) data.IdMascota);                if(mas is not null)                {                    foreach(var item in mas)                    {                        var r = await razaRepository.GetRaza(userLoged.Token, empresaData.Prefijo, (string)item.codEspecie, (string)item.codRaza);                        mascota.IdMascota = item.idMascota;                        mascota.NombreMascota = item.nombreMascota;                        mascota.CodRaza = item.codRaza;                        if (r is not null)                        {                            var x = r[0];                            mascota.Raza = x.raza;                        }                        mascota.CodSexo = item.codSexo;                        mascota.Sexo = item.sexo;                        mascota.CodColor = item.codColor;                        mascota.FechaNacimiento = item.fechaNacimiento;                        mascota.EstadoReproductivo = item.estadoReproductivo;                        mascota.Microchip = item.microchip;                        mascota.IdEstado = item.idEstado;                        mascota.Estado = item.estado;                        mascota.FechaCreacion = item.fechaCreacion;                        mascota.Especie = item.especie;                        mascota.RutCliente = item.rutCliente;
                        mascota.IdFotoPerfil = item.idFotoPerfil;
                        if(!string.IsNullOrEmpty(mascota.IdFotoPerfil))
                        {
                            MascotaFotos = await mascotasFotosRepository.GetFotoMascota(userLoged.Token, empresaData.Prefijo, (string)mascota.IdFotoPerfil);
                            urlFoto = $"{http.BaseAddress}api/imagenes/test/{mascota.RutCliente}/{mascota.IdMascota}/{MascotaFotos.Url}";
                            StateHasChanged();
                        }
                        else
                        {
                            MascotaFotos = new MedMascotaFotos();
                            urlFoto = $"{http.BaseAddress}api/imagenes/base/base/base/base_perfil.png";
                            StateHasChanged();
                        }
                    }                }
                var lst = await hospitalizacionesRepository.GetHospitalizaciones(userLoged.Token, empresaData.Prefijo, (string)data.IdMascota);                if (lst is not null)                {                    if (lst.Count > 0)                    {                        Hospitalizaciones = lst;                    }                                       }
                var con = await consultasRepository.ConsultasMascota(userLoged.Token, empresaData.Prefijo, data.IdMascota);                if (con is not null)                {                    if (con.Count > 0)                    {                        consulta = con;                        StateHasChanged();                    }                }

                var ctrl = await controlesRepository.ControlesMascota(userLoged.Token, empresaData.Prefijo, data.IdMascota);                if (ctrl is not null)                {                    if(ctrl.Count > 0)                    {                        control = ctrl;                    }                }

                var rc = await recetasRepository.GetRecetas(userLoged.Token, empresaData.Prefijo, (string)data.RutCliente, (string)data.IdMascota);                if (rc is not null)                {                    if (rc.Count > 0)                    {                        Recetas = rc;                    }                }            }        }    }    private async Task RecargaDatos(bool value)    {        if(value)        {            if(data.IdMascota is not null && data.RutCliente is not null)            {
                var lst = await hospitalizacionesRepository.GetHospitalizaciones(userLoged.Token, empresaData.Prefijo, (string)data.IdMascota);                if (lst is not null)                {                    if (lst.Count > 0)                    {                        Hospitalizaciones = lst;                    }                }                var resp = await propietarioRepository.GetPropietario(userLoged.Token, data.RutCliente, empresaData.Prefijo);                if(resp is not null)                {                    Propietario.Nombre = resp.nombre;                    Propietario.Rut = data.RutCliente;                    Propietario.Email = resp.email;                    Propietario.Direccion = resp.direccion;                    Propietario.Fono = resp.fono1;                    Propietario.Cupo = resp.cupo;                    Propietario.Disponible = resp.disponible;                    // Console.WriteLine($"bandera bloqueo: {bandera.bloqueo}");                    Propietario.Bloqueo = resp.bloqueo == 0 ? false : true;                    // Console.WriteLine($"bloqueo: {Cliente.Bloqueo}");                    Propietario.Plazo = resp.plazo;                    StateHasChanged();                }

                var con = await consultasRepository.ConsultasMascota(userLoged.Token, empresaData.Prefijo, data.IdMascota);                if (con.Count > 0)                {                    consulta = con;                    StateHasChanged();                }

                var ctrl = await controlesRepository.ControlesMascota(userLoged.Token, empresaData.Prefijo, data.IdMascota);                if (ctrl is not null)                {                    if (ctrl.Count > 0)                    {                        control = ctrl;                    }                }

                var rc = await recetasRepository.GetRecetas(userLoged.Token, empresaData.Prefijo, (string)data.RutCliente, (string)data.IdMascota);                if (rc is not null)                {                    if (rc.Count > 0)                    {                        Recetas = rc;                    }                }
                var mascotas = await mascotaRepository.GetMascotaRutCliente(userLoged.Token, empresaData.Prefijo, data.RutCliente);                if (mascotas is not null)                {                    foreach (var item in mascotas)                    {                        Console.WriteLine(item);
                        var especie = await especieRepository.GetEspecie(userLoged.Token, empresaData.Prefijo, (string)item.codEspecie);
                        var estado = await estadoRepository.GetEstado(userLoged.Token, empresaData.Prefijo, (string)item.idEstado);                        Mascotas.Add(new MascotasDto                            {                                CodColor = item.codColor,                                CodEspecie = item.codEspecie,                                Sexo = item.sexo,                                CodEstadoReproductivo = item.codEstadoReproductivo,                                CodRaza = item.codRaza,                                CodSexo = item.codSexo,                                Color = item.color,                                Especie = (string)especie[0].especie,                                Estado = (string)estado[0].nombreEstado,                                EstadoReproductivo = item.estadoReproductivo,                                FechaCreacion = item.fechaCreacion,                                FechaNacimiento = item.fechaNacimiento,                                IdEstado = item.idEstado,                                IdFotoPerfil = item.idFotoPerfil,                                IdMascota = item.idMascota,                                Microchip = item.microchip,                                NombreMascota = item.nombreMascota,                                NumeroHospitalizacion = item.numeroHospitalizacion,                                Raza = item.raza,                                RutCliente = item.rutCliente,                                UltimaModificacion = item.ultimaModificacion                            });                    }                    StateHasChanged();                }            }        }    }    private void LimpiarFrm()    {        mascota = new MascotasDto();        Propietario = new Propietario();        Mascotas = new List<MascotasDto>();        Hospitalizaciones = new List<HospitalizacionesDto>();        consulta = new List<ConsultasDto>();        control = new List<ControlDto>();        Recetas = new List<RecetasDto>();    }    private async Task RecargarCliente(bool value)    {        if(value)        {            if(data.RutCliente is not null)            {                var resp = await propietarioRepository.GetPropietario(userLoged.Token, data.RutCliente, empresaData.Prefijo);                if (resp is not null)                {                    Propietario.Nombre = resp.nombre;                    Propietario.Rut = data.RutCliente;                    Propietario.Email = resp.email;                    Propietario.Direccion = resp.direccion;                    Propietario.Fono = resp.fono1;                    Propietario.Cupo = resp.cupo;                    Propietario.Disponible = resp.disponible;                    // Console.WriteLine($"bandera bloqueo: {bandera.bloqueo}");                    Propietario.Bloqueo = resp.bloqueo == 0 ? false : true;                    // Console.WriteLine($"bloqueo: {Cliente.Bloqueo}");                    Propietario.Plazo = resp.plazo;                    StateHasChanged();                }
                var mascotas = await mascotaRepository.GetMascotaRutCliente(userLoged.Token, empresaData.Prefijo, data.RutCliente);                if (mascotas is not null)                {                    foreach (var item in mascotas)                    {                        Console.WriteLine(item);
                        var especie = await especieRepository.GetEspecie(userLoged.Token, empresaData.Prefijo, (string)item.codEspecie);
                        var estado = await estadoRepository.GetEstado(userLoged.Token, empresaData.Prefijo, (string)item.idEstado);                        Mascotas.Add(new MascotasDto                            {                                CodColor = item.codColor,                                CodEspecie = item.codEspecie,                                Sexo = item.sexo,                                CodEstadoReproductivo = item.codEstadoReproductivo,                                CodRaza = item.codRaza,                                CodSexo = item.codSexo,                                Color = item.color,                                Especie = (string)especie[0].especie,                                Estado = (string)estado[0].nombreEstado,                                EstadoReproductivo = item.estadoReproductivo,                                FechaCreacion = item.fechaCreacion,                                FechaNacimiento = item.fechaNacimiento,                                IdEstado = item.idEstado,                                IdFotoPerfil = item.idFotoPerfil,                                IdMascota = item.idMascota,                                Microchip = item.microchip,                                NombreMascota = item.nombreMascota,                                NumeroHospitalizacion = item.numeroHospitalizacion,                                Raza = item.raza,                                RutCliente = item.rutCliente,                                UltimaModificacion = item.ultimaModificacion                            });                    }                    StateHasChanged();                }            }        }    }    private async void ModificarMascota()    {        Console.WriteLine($"ventana : {ventana}");        Console.WriteLine($"id mascota {mascota.IdMascota}");        // Console.WriteLine(mascota);        // var request = new MascotaDtoRequest();        // request.IdMascota = mascota.IdMascota;        // request.NombreMascota = mascota.NombreMascota;        // var result = await mascotaRepository.PutMascota("", "test", request);        showModal = true;    }    private async void ModificaPropietario()    {        Console.WriteLine($"ventana : {ventana}");        Console.WriteLine(Propietario);    }   }